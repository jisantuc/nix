#! @perl@ -w -I@libexecdir@/nix

use strict;
use IPC::Open2;
use POSIX qw(tmpnam);
use readmanifest;

my $tmpdir;
do { $tmpdir = tmpnam(); }
until mkdir $tmpdir, 0777;

my $manifest = "$tmpdir/manifest";
my $confFile = "@sysconfdir@/nix/prebuilts.conf";

#END { unlink $manifest; rmdir $tmpdir; }


# Obtain URLs either from the command line or from a configuration file.
my %storePaths2urls;
my %urls2hashes;
my %successors;

sub processURL {
    my $url = shift;

    $url =~ s/\/$//;
    print "obtaining list of Nix archives at $url...\n";

    system("@curl@ --fail --silent --show-error --location --max-redirs 20 " .
           "'$url' > '$manifest'") == 0
           or die "curl failed: $?";
    
    readManifest $manifest, \%storePaths2urls, \%urls2hashes, \%successors;
}

if (scalar @ARGV > 0) {
    while (@ARGV) {
        my $url = shift @ARGV;
	processURL $url;
    }
} else {
    open CONFFILE, "<$confFile";
    while (<CONFFILE>) {
        chomp;
        if (/^\s*(\S+)\s*(\#.*)?$/) {
            my $url = $1;
	    processURL $url;
        }
    }
    close CONFFILE;
}


my $size = scalar (keys %storePaths2urls);
print "$size store paths in manifest\n";


# Instantiate a store expression that builds the substitute program
# (the program that fetches URLs and unpacks them into the store).
my $nixExpr =
    "(import @datadir@/nix/corepkgs/nix-pull) " .
    "{system = \"@system@\";}";

print STDERR "instantiating store expression...\n";
my $storeExpr = `echo '$nixExpr' | @bindir@/nix-instantiate -`
    or die "cannot instantiate Nix expression";
chomp $storeExpr;


# Register all substitutes.
print STDERR "registering substitutes...\n";

my $pid = open2(\*READ, \*WRITE, "@bindir@/nix-store --substitute")
    or die "cannot run nix-store";

close READ;

foreach my $storePath (keys %storePaths2urls) {
    print WRITE "$storePath\n";
    print WRITE "$storeExpr\n";
    print WRITE "/fetch\n";
    print WRITE "2\n";
    print WRITE "$storePaths2urls{$storePath}\n";
    print WRITE "$urls2hashes{$storePaths2urls{$storePath}}\n";
}

close WRITE;

waitpid $pid, 0;
$? == 0 or die "nix-store failed";


# Register all successors.
print STDERR "registering successors...\n";
my @sucs = %successors;
while (scalar @sucs > 0) {
    my $n = scalar @sucs;
    if ($n > 256) { $n = 256 };
    my @sucs2 = @sucs[0..$n - 1];
    @sucs = @sucs[$n..scalar @sucs - 1];
    system "@bindir@/nix-store --successor @sucs2";
    if ($?) { die "`nix-store --successor' failed"; }
}
