#! @perl@ -w -I@libexecdir@/nix

use strict;
use IPC::Open2;
use POSIX qw(tmpnam);
use readmanifest;

my $tmpdir;
do { $tmpdir = tmpnam(); }
until mkdir $tmpdir, 0777;

my $manifest = "$tmpdir/manifest";

END { unlink $manifest; rmdir $tmpdir; }


# Obtain URLs either from the command line or from a configuration file.
my %narFiles;
my %patches;
my %successors;

sub processURL {
    my $url = shift;

    $url =~ s/\/$//;
    print "obtaining list of Nix archives at $url...\n";

    system("@curl@ --fail --silent --show-error --location --max-redirs 20 " .
           "'$url' > '$manifest'") == 0
           or die "curl failed: $?";

    readManifest $manifest, \%narFiles, \%patches, \%successors;

    my $baseName = "unnamed";
    if ($url =~ /\/([^\/]+)\/[^\/]+$/) { # get the forelast component
        $baseName = $1;
    }

    my $hash = `@bindir@/nix-hash --flat '$manifest'`
        or die "cannot hash `$manifest'";
    chomp $hash;
    
    my $finalPath = "@localstatedir@/nix/manifests/$baseName-$hash.nixmanifest";
    
    system("mv '$manifest' '$finalPath'") == 0
        or die "cannot move `$manifest' to `$finalPath";
}

while (@ARGV) {
    my $url = shift @ARGV;
    processURL $url;
}


my $size = scalar (keys %narFiles);
print "$size store paths in manifest\n";


# Register all substitutes.
print STDERR "registering substitutes...\n";

my $pid = open2(\*READ, \*WRITE, "@bindir@/nix-store --substitute")
    or die "cannot run nix-store";

close READ;

foreach my $storePath (keys %narFiles) {
    my $narFileList = $narFiles{$storePath};
    foreach my $narFile (@{$narFileList}) {
        print WRITE "$storePath\n";
        print WRITE "@libexecdir@/nix/download-using-manifests.pl\n";
        print WRITE "0\n";
    }
}

close WRITE;

waitpid $pid, 0;
$? == 0 or die "nix-store failed";


# Register all successors.
print STDERR "registering successors...\n";
my @sucs = %successors;
while (scalar @sucs > 0) {
    my $n = scalar @sucs;
    if ($n > 256) { $n = 256 };
    my @sucs2 = @sucs[0..$n - 1];
    @sucs = @sucs[$n..scalar @sucs - 1];
    system "@bindir@/nix-store --successor @sucs2";
    if ($?) { die "`nix-store --successor' failed"; }
}
