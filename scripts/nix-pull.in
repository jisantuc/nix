#! /usr/bin/perl -w

use strict;
use IPC::Open2;

my $tmpfile = "@localstatedir@/nix/pull.tmp";
my $conffile = "@sysconfdir@/nix/prebuilts.conf";

my @ids;
my @subs;
my @sucs;

my $fullexpr = "[";
my $first = 1;

open CONFFILE, "<$conffile";

while (<CONFFILE>) {

    chomp;
    if (/^\s*(\S+)\s*(\#.*)?$/) {
        my $url = $1;

        print "obtaining list of Nix archives at $url...\n";

        system "wget '$url' -O '$tmpfile' 2> /dev/null"; # !!! escape
        if ($?) { die "`wget' failed"; }
        
        open INDEX, "<$tmpfile";

        while (<INDEX>) {
            # Get all links to prebuilts, that is, file names of the
            # form foo-HASH-HASH.tar.bz2.
            next unless (/HREF=\"([^\"]*)\"/);
            my $fn = $1;
            next if $fn =~ /\.\./;
            next if $fn =~ /\//;
            next unless $fn =~ /^([0-9a-z]{32})-([0-9a-z]{32})(.*)\.nar\.bz2$/;
            my $hash = $1;
            my $id = $2;
            my $outname = $3;
            my $fsid;
            if ($outname =~ /^-/) {
                next unless $outname =~ /^-((s-([0-9a-z]{32}))?.*)$/;
                $outname = $1;
                $fsid = $3;
            } else {
                $outname = "unnamed";
            }

            print STDERR "$id ($outname)\n";

            # Construct a Fix expression that fetches and unpacks a
            # Nix archive from the network.
            my $fetch =
              "App(IncludeFix(\"fetchurl/fetchurl.fix\"), " .
              "[(\"url\", \"$url/$fn\"), (\"md5\", \"$hash\")])";
            my $fixexpr = 
                "App(IncludeFix(\"nar/unnar.fix\"), " .
                "[ (\"nar\", $fetch)" .
                ", (\"name\", \"$outname\")" .
                ", (\"id\", \"$id\")" .
                "])";
            
	    if (!$first) { $fullexpr .= "," };
	    $first = 0;
	    $fullexpr .= $fixexpr; # !!! O(n^2)?

	    push @ids, $id;

            # Does the name encode a successor relation?
            if (defined $fsid) {
                push @sucs, $fsid;
                push @sucs, $id;
            }
        }

        close INDEX;

        unlink $tmpfile;
    }

}

$fullexpr .= "]";

# Instantiate Nix expressions from the Fix expressions we created above.
print STDERR "running fix...\n";
my $pid = open2(\*READ, \*WRITE, "fix -") or die "cannot run fix";

print WRITE $fullexpr;
close WRITE;
my $i = 0;
while (<READ>) {
    chomp;
    die unless /^([0-9a-z]{32})$/;
    my $nid = $1;
    die unless ($i < scalar @ids);
    my $id = $ids[$i++];
    push @subs, $id;
    push @subs, $nid;
}

waitpid $pid, 0;
$? == 0 or die "fix failed";

# Register all substitutes.
print STDERR "registering substitutes...\n";
system "nix --substitute @subs";
if ($?) { die "`nix --substitute' failed"; }

# Register all successors.
print STDERR "registering successors...\n";
system "nix --successor @sucs";
if ($?) { die "`nix --successor' failed"; }
